package com.wondersgroup.special.Employment.activity;

import android.content.Context;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;

import com.wondersgroup.special.Employment.adapter.ExpanChangeAdapter;
import com.wondersgroup.special.Employment.adapter.ExpandCheckAdapter;
import com.wondersgroup.special.Employment.adapter.ExpandPermissionAdapter;
import com.wondersgroup.special.Employment.adapter.ExpandRewardAdapter;
import com.wondersgroup.special.Employment.adapter.ExpandTrainAdapter;
import com.wondersgroup.special.R;
import com.wondersgroup.special.ResponseCallBack;
import com.wondersgroup.special.Employment.adapter.ExpandWorkAdapter;
import com.wondersgroup.special.activity.BaseActivity;
import com.wondersgroup.special.common.RecyclerBaseAdapter;
import com.wondersgroup.special.constant.UrlConstant;
import com.wondersgroup.special.entity.PAssessInfo;
import com.wondersgroup.special.entity.PAwardInfo;
import com.wondersgroup.special.entity.PCertifiedInfo;
import com.wondersgroup.special.entity.PChangeInfo;
import com.wondersgroup.special.entity.PTrainInfo;
import com.wondersgroup.special.entity.PworkInfo;
import com.wondersgroup.special.widget.MyItemDecoration;
import com.zhy.http.okhttp.OkHttpUtils;
import com.zhy.http.okhttp.request.RequestCall;

import java.util.ArrayList;
import java.util.List;

import okhttp3.Response;

/**
 * Created by bjy on 2016/12/20.
 */

public class EmploymentExpandActivity extends BaseActivity implements RecyclerBaseAdapter.OnItemClickListener {
    private RecyclerView recyclerView;
    private RecyclerBaseAdapter adapter;
    private ArrayList datas;
    private String uuid;
    private int type;
    private Context context;
    private RequestCall call;
    @Override
    protected void initView() {
        context = this;
        setContentView(R.layout.activity_employment_expand);
        recyclerView = (RecyclerView) findViewById(R.id.recyclerView);
        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(context);
        recyclerView.setLayoutManager(layoutManager);
        recyclerView.addItemDecoration(new MyItemDecoration(context,MyItemDecoration.VERTICAL_LIST));
    }

    @Override
    protected void initData(Bundle savedInstanceState) {
        uuid = getIntent().getStringExtra("uuid");
        type = getIntent().getIntExtra("type",0);
        switch (type){
            case 1:
                datas = new ArrayList<PworkInfo>();
                adapter = new ExpandWorkAdapter(context,datas);
                break;
            case 2:
                datas = new ArrayList<PCertifiedInfo>();
                adapter = new ExpandPermissionAdapter(context,datas);
                break;
            case 3:
                datas = new ArrayList<PAwardInfo>();
                adapter = new ExpandRewardAdapter(context,datas);
                break;
            case 4:
                datas = new ArrayList<PTrainInfo>();
                adapter = new ExpandTrainAdapter(context,datas);
                break;
            case 5:
                datas = new ArrayList<PAssessInfo>();
                adapter = new ExpandCheckAdapter(context,datas);
                break;
            case 6:
                datas = new ArrayList<PChangeInfo>();
                adapter = new ExpanChangeAdapter(context,datas);
        }
        recyclerView.setAdapter(adapter);

        call = OkHttpUtils.get()
                .url(UrlConstant.QUERY_PERSON_EXPAND_INFO)
                .addParams("uuid", uuid)
                .addParams("type", type + "")
                .build();

        switch (type){
            case 1:
                getWorkInfo();
                break;
            case 2:
                getPermissionInfo();
                break;
            case 3:
                getRewardInfo();
                break;
            case 4:
                getTrainInfo();
                break;
            case 5:
                getCheckInfo();
                break;
            case 6:
                getChangeInfo();
                break;
        }
    }

    public void getWorkInfo(){
        call.execute(new ResponseCallBack<PworkInfo>() {
            @Override
            public void onResponse(List<PworkInfo> t) {
                super.onResponse(t);
                datas.addAll(t);
                adapter.notifyDataSetChanged();
            }
        });
    }

    public void getPermissionInfo(){
        call.execute(new ResponseCallBack<PCertifiedInfo>() {
            @Override
            public void onResponse(List<PCertifiedInfo> t) {
                super.onResponse(t);
                datas.addAll(t);
                adapter.notifyDataSetChanged();
            }
        });
    }
    public void getRewardInfo(){
        call.execute(new ResponseCallBack<PAwardInfo>() {
            @Override
            public void onResponse(List<PAwardInfo> t) {
                super.onResponse(t);
                datas.addAll(t);
                adapter.notifyDataSetChanged();
            }
        });
    }
    public void getTrainInfo(){
        call.execute(new ResponseCallBack<PTrainInfo>() {
            @Override
            public void onResponse(List<PTrainInfo> t) {
                super.onResponse(t);
                datas.addAll(t);
                adapter.notifyDataSetChanged();
            }
        });
    }
    public void getCheckInfo(){
        call.execute(new ResponseCallBack<PAssessInfo>() {
            @Override
            public void onResponse(List<PAssessInfo> t) {
                super.onResponse(t);
                datas.addAll(t);
                adapter.notifyDataSetChanged();
            }
        });
    }
    public void getChangeInfo(){
        call.execute(new ResponseCallBack<PChangeInfo>() {
            @Override
            public void onResponse(List<PChangeInfo> t) {
                super.onResponse(t);
                datas.addAll(t);
                adapter.notifyDataSetChanged();
            }
        });
    }

    @Override
    public void onItemClick(int position) {

    }
}
