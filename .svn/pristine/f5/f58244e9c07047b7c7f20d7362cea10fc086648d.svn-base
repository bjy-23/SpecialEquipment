package com.wondersgroup.special.activity;

import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.wondersgroup.special.R;
import com.wondersgroup.special.dialog.LoadDialog;
import com.wondersgroup.special.entity.User;
import com.wondersgroup.special.utils.Utils;

public abstract class BaseActivity extends AppCompatActivity implements View.OnClickListener {
    protected RelativeLayout mToolBar;
    protected ImageView mImageBack;
    protected ImageView mImageRight;
    protected TextView mTitle;
    protected Button mTextRight;
    private boolean isToolBarVisible = true;
    protected FrameLayout mContentLayout;
    private boolean flag = true;
    private LoadDialog mLoadingDialog;
    protected User user;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // 竖屏固定
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_NOSENSOR);
        initTopView();
//        initUser();
        initView();
        initData(savedInstanceState);
    }

    @Override
    protected void onResume() {
        super.onResume();
    }

    private void initUser() {
        user = Utils.getUser();
    }

    private void initToolBar(View view) {
        mToolBar = (RelativeLayout) view.findViewById(R.id.tool_bar);
        mImageBack = (ImageView) view.findViewById(R.id.image_back);
        mImageRight = (ImageView) view.findViewById(R.id.image_right);
        mTitle = (TextView) view.findViewById(R.id.title);
        mTextRight = (Button) view.findViewById(R.id.text_right);
        mImageBack.setOnClickListener(this);
        mTitle.setOnClickListener(this);
        mImageRight.setOnClickListener(this);
        mTextRight.setOnClickListener(this);
    }

    /**
     * 设置标题
     *
     * @param title
     */
    protected void setCustomTitle(CharSequence title) {
        if (!TextUtils.isEmpty(title))
            mTitle.setText(title);
    }

    protected void setCustomTitle(int resId) {
        setCustomTitle(getText(resId));
    }


    /**
     * 设置ToolBar是否可见
     *
     * @param visible
     */
    protected void setToolBarVisible(boolean visible) {
        isToolBarVisible = visible;
        mToolBar.setVisibility(visible ? View.VISIBLE : View.GONE);
    }

    /**
     * ToolBar是否显示
     *
     * @return
     */
    protected boolean isToolBarVisible() {
        return isToolBarVisible;
    }

    /**
     * 设置返回按钮是否可见
     *
     * @param visible
     */
    protected void setNavigationVisible(boolean visible) {
        mImageBack.setVisibility(visible ? View.VISIBLE : View.INVISIBLE);
    }

    private void initTopView() {
        View parentView = LayoutInflater.from(this).inflate(R.layout.activity_base, null);
        mContentLayout = (FrameLayout) parentView.findViewById(R.id.content);
        initToolBar(parentView);
        setContentView(parentView, new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));
    }

    /**
     * 获得内容布局
     * getContentView
     */
    public View getContentView() {
        if (isToolBarVisible()) {
            return mContentLayout;
        } else {
            return getWindow().getDecorView();
        }
    }

    /**
     * 用指定的View填充主界面(默认有标题)
     *
     * @param contentView 指定的View
     */
    public void setContentView(View contentView) {
        mContentLayout.removeAllViews();
        mContentLayout.addView(contentView, new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.MATCH_PARENT));
    }

    /**
     * 用指定资源ID表示的View填充主界面(默认有标题)
     *
     * @param resId 指定的View的资源ID
     */
    public void setContentView(int resId) {
        setContentView(LayoutInflater.from(this).inflate(resId, null));
    }

    protected void startActivity(Class<?> cls, Bundle bundle) {
        Intent intent = new Intent();
        intent.setClass(this, cls);
        intent.putExtras(bundle);
        startActivity(intent);
    }


    protected void startActivityForResult(Class<?> cls, int resultCode) {
        Intent intent = new Intent();
        intent.setClass(this, cls);
        startActivityForResult(intent, resultCode);
    }

    protected void startActivityForResult(Class<?> cls, Bundle bundle, int resultCode) {
        Intent intent = new Intent();
        intent.setClass(this, cls);
        intent.putExtras(bundle);
        startActivityForResult(intent, resultCode);
    }

    /**
     * 显示加载进度条
     */
    public void showLoadingDialog() {
        showLoadingDialog(null);
    }

    public void showLoadingDialog(String loadingText) {
        if (null == mLoadingDialog) {
            LoadDialog.Builder builder;
            builder = new LoadDialog.Builder(this);
            if (!TextUtils.isEmpty(loadingText)) {
                builder.setLoadingText(loadingText);
            }
            mLoadingDialog = builder.create();
        }
        mLoadingDialog.setCanceledOnTouchOutside(false);
        mLoadingDialog.show();
    }

    /**
     * 隐藏加载进度条
     */
    public void dismissLoadingDialog() {
        if (null != mLoadingDialog)
            mLoadingDialog.dismiss();
    }


    /**
     * 点击ToolBar右侧图标
     */
    protected void onImageRightClick() {
    }

    /**
     * 点击ToolBar右侧文字
     */
    protected void onTextRightClick() {
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.image_back:
                finish();
                break;
            case R.id.title:
                if (flag) {
                    flag = false;
                    mTitle.setEllipsize(null); // 展开
                    mTitle.setSingleLine(flag);
                } else {
                    flag = true;
                    mTitle.setEllipsize(TextUtils.TruncateAt.END); // 收缩
                    mTitle.setSingleLine(flag);
                }
                break;
            case R.id.text_right:
                onTextRightClick();
                break;
            case R.id.image_right:
                onImageRightClick();
                break;
            default:
                break;
        }
    }

    protected void showMsg(String msg) {
        Toast.makeText(getApplicationContext(), msg, Toast.LENGTH_SHORT).show();
    }

    /**
     * 初始化页面
     */
    protected abstract void initView();

    /**
     * 初始化数据
     *
     * @param savedInstanceState
     */
    protected abstract void initData(Bundle savedInstanceState);
}
