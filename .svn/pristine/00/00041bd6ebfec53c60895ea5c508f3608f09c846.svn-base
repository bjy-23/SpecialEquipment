package com.wondersgroup.special.activity;

import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import com.wondersgroup.special.R;
import com.wondersgroup.special.constant.Params;
import com.wondersgroup.special.datepicker.DatePickerDialog;
import com.wondersgroup.special.dialog.PromptDialog;
import com.wondersgroup.special.widget.ClearEditText;

import java.util.HashMap;

public class EmploymentActivity extends BaseActivity {
    private Button mBtnSearch;
    private ClearEditText mCertPro, mName, mCardId, mUnitName;
    private TextView mPermitType, mStartDate, mEndDate;
    private HashMap<String, String> params;
    private DatePickerDialog mDialog;

    @Override
    protected void initView() {
        setContentView(R.layout.activity_employment);
        mTitle.setText("人员查询");
        mBtnSearch = (Button) findViewById(R.id.btn_search);
        mBtnSearch.setOnClickListener(this);
        mName = (ClearEditText) findViewById(R.id.name);
        mCardId = (ClearEditText) findViewById(R.id.card_id);
        mUnitName = (ClearEditText) findViewById(R.id.unit_name);
        mPermitType = (TextView) findViewById(R.id.permit_type);
        mStartDate = (TextView) findViewById(R.id.start_date);
        mStartDate.setOnClickListener(this);
        mEndDate = (TextView) findViewById(R.id.end_date);
        mEndDate.setOnClickListener(this);
        mCertPro = (ClearEditText) findViewById(R.id.cert_pro);
    }

    private boolean validate() {
        return true;
    }

    @Override
    protected void initData(Bundle savedInstanceState) {
        String employType = getIntent().getExtras().getString(Params.EMPLOY_TYPE);
        params = new HashMap<>();
        if (!TextUtils.isEmpty(employType))
            params.put("type", employType);
    }

    private void getParams() {
        String name = mName.getText().toString();
        if (!TextUtils.isEmpty(name)) {
            params.put("name", name);
        }
        String cardId = mCardId.getText().toString();
        if (!TextUtils.isEmpty(cardId)) {
            params.put("cardId", cardId);
        }
        String certType = mPermitType.getText().toString();
        if (!TextUtils.isEmpty(certType)) {
            params.put("certType", certType);
        }
        String unitName = mUnitName.getText().toString();
        if (!TextUtils.isEmpty(unitName)) {
            params.put("unitName", unitName);
        }
        String startDate = mStartDate.getText().toString();
        String endDate = mEndDate.getText().toString();
        if (!TextUtils.isEmpty(startDate)) {
            params.put("startDate", startDate);
        }
        if (!TextUtils.isEmpty(endDate)) {
            params.put("endDate", endDate);
        }
        String certPro = mCertPro.getText().toString();
        if (!TextUtils.isEmpty(certPro)) {
            params.put("certPro", certPro);
        }
    }

    @Override
    public void onClick(View v) {
        super.onClick(v);
        switch (v.getId()) {
            case R.id.btn_search:
                getParams();
                Intent intent = new Intent(EmploymentActivity.this, EmploymentListActivity.class);
                Bundle bundle = getIntent().getExtras();
                bundle.putSerializable("PARAMS", params);
                intent.putExtras(bundle);
                startActivity(intent);
                break;
            case R.id.start_date:
                if (null == mDialog || (mDialog != null && !mDialog.isShowing())) {
                    mDialog = new DatePickerDialog.Builder(EmploymentActivity.this).setDayOff(true)
                            .setNegativeButton("取消", null)
                            .setPositiveButton("确定", new DatePickerDialog.Builder.OnDatePickListener() {
                                @Override
                                public void onDatePick(DialogInterface dialog, int witch, int... args) {
                                    mStartDate.setText(args[0] + "-" + args[1]);
                                }
                            }).create();
                    mDialog.setCanceledOnTouchOutside(false);
                    mDialog.show();
                }
                break;
            case R.id.end_date:
                if (null == mDialog || (mDialog != null && !mDialog.isShowing())) {
                    mDialog = new DatePickerDialog.Builder(EmploymentActivity.this).setDayOff(true)
                            .setNegativeButton("取消", null)
                            .setPositiveButton("确定", new DatePickerDialog.Builder.OnDatePickListener() {
                                @Override
                                public void onDatePick(DialogInterface dialog, int witch, int... args) {
                                    mEndDate.setText(args[0] + "-" + args[1]);
                                }
                            }).create();
                    mDialog.setCanceledOnTouchOutside(false);
                    mDialog.show();
                }
                break;
            default:
                break;
        }
    }
}
