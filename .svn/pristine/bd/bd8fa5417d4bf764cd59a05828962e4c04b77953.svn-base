package com.wondersgroup.special.activity;

import android.graphics.Color;
import android.os.Bundle;
import android.text.TextUtils;
import android.widget.TextView;

import com.github.mikephil.charting.charts.BarChart;
import com.github.mikephil.charting.components.AxisBase;
import com.github.mikephil.charting.components.Legend;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.components.YAxis;
import com.github.mikephil.charting.data.BarData;
import com.github.mikephil.charting.data.BarDataSet;
import com.github.mikephil.charting.data.BarEntry;
import com.github.mikephil.charting.formatter.IAxisValueFormatter;
import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;
import com.wondersgroup.special.R;
import com.wondersgroup.special.ResponseCallBack;
import com.wondersgroup.special.adapter.AnalysisAdapter;
import com.wondersgroup.special.constant.Constant;
import com.wondersgroup.special.constant.UrlConstant;
import com.wondersgroup.special.entity.AnalysisElevatorRenovationResult;
import com.wondersgroup.special.entity.AnalysisResult;
import com.wondersgroup.special.utils.DateUtils;
import com.wondersgroup.special.widget.SVListView;
import com.zhy.http.okhttp.OkHttpUtils;

import java.util.ArrayList;
import java.util.List;

import okhttp3.Call;
import okhttp3.Request;

/**
 * 住宅电梯改造情况分析
 */
public class ElevatorRenovationActivity extends BaseActivity {
    private SVListView mList, mList1, mList2;
    private TextView mTextChartName, mTextChartName1, mTextChartName2;
    private BarChart mBarChart;
    private List<AnalysisResult> data, data1, data2;

    @Override
    protected void initView() {
        setContentView(R.layout.activity_elevator_renovation);
        mBarChart = (BarChart) findViewById(R.id.bar_chart);
        mTextChartName = (TextView) findViewById(R.id.chart_name);
        mTextChartName.setText("安装");
        mTextChartName1 = (TextView) findViewById(R.id.chart_name1);
        mTextChartName1.setText("改造");
        mTextChartName2 = (TextView) findViewById(R.id.chart_name2);
        mTextChartName2.setText("维修");
        mList = (SVListView) findViewById(R.id.list);
        mList1 = (SVListView) findViewById(R.id.list1);
        mList2 = (SVListView) findViewById(R.id.list2);
    }

    @Override
    protected void initData(Bundle savedInstanceState) {
        getAnalysisData();
    }

    private void getAnalysisData() {
        OkHttpUtils.get().url(UrlConstant.GET_ANALYSIS_DATA)
                .addParams("type", Constant.Overview.ELEVATOR)
                .addParams("orderNum", Constant.Elevator.RENOVATION)
                .addParams("startDate", DateUtils.getYesterday())
                .addParams("endDate", DateUtils.getToday())
                .build().execute(new ResponseCallBack<AnalysisElevatorRenovationResult>() {
            @Override
            public void onBefore(Request request) {
                super.onBefore(request);
            }

            @Override
            public void onAfter() {
                super.onAfter();
            }

            @Override
            public void onResponse(AnalysisElevatorRenovationResult result) {
                super.onResponse(result);
                if (null != result) {
                    data = result.getFixData();
                    data1 = result.getReformData();
                    data2 = result.getRepairData();
                    mList.setAdapter(new AnalysisAdapter(ElevatorRenovationActivity.this, data));
                    mList1.setAdapter(new AnalysisAdapter(ElevatorRenovationActivity.this, data1));
                    mList2.setAdapter(new AnalysisAdapter(ElevatorRenovationActivity.this, data2));
                    showChart();
                }
            }

            @Override
            public void onError(Call call, Exception e) {
                super.onError(call, e);
                showMsg(e.getMessage());
            }
        });
    }

    private void showChart() {
        showBarChartData();
        setBarChartData();
    }

    /**
     * 显示柱状图
     */
    private void showBarChartData() {
        mBarChart.setDrawBarShadow(false);
        mBarChart.setDrawValueAboveBar(true);

        mBarChart.getDescription().setEnabled(false);

        // if more than 60 entries are displayed in the chart, no values will be
        // drawn
        mBarChart.setMaxVisibleValueCount(60);

        // scaling can now only be done on x- and y-axis separately
        mBarChart.setPinchZoom(false);

        mBarChart.setDrawGridBackground(false);
        // mChart.setDrawYLabels(false);

        XAxis xAxis = mBarChart.getXAxis();
        xAxis.setValueFormatter(new IAxisValueFormatter() {

            @Override
            public String getFormattedValue(float value, AxisBase axis) {
                return data.get((int) value).getName();
            }

//            @Override
//            public int getDecimalDigits() {
//                return 0;
//            }
        });
        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
        xAxis.setDrawGridLines(false);
        xAxis.setCenterAxisLabels(false);
        xAxis.setGranularity(1f); // only intervals of 1 day
        xAxis.setLabelCount(data.size());
//        xAxis.setValueFormatter(xAxisFormatter);

        YAxis leftAxis = mBarChart.getAxisLeft();
//        leftAxis.setLabelCount(data.size());
//        leftAxis.setValueFormatter(custom);
        leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);
        leftAxis.setSpaceTop(15f);
        leftAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

        YAxis rightAxis = mBarChart.getAxisRight();
        rightAxis.setEnabled(false);
        rightAxis.setDrawGridLines(false);
        rightAxis.setLabelCount(8, false);
//        rightAxis.setValueFormatter(custom);
        rightAxis.setSpaceTop(15f);
        rightAxis.setAxisMinimum(0f); // this replaces setStartAtZero(true)

        Legend l = mBarChart.getLegend();
        l.setEnabled(false);
        l.setVerticalAlignment(Legend.LegendVerticalAlignment.BOTTOM);
        l.setHorizontalAlignment(Legend.LegendHorizontalAlignment.LEFT);
        l.setOrientation(Legend.LegendOrientation.HORIZONTAL);
        l.setDrawInside(false);
        l.setForm(Legend.LegendForm.SQUARE);
        l.setFormSize(9f);
        l.setTextSize(11f);
        l.setXEntrySpace(4f);
        mBarChart.setNoDataText("没有数据");

//        setBarChartData();
    }

    private void setBarChartData() {
        float start = 1f;

        ArrayList<BarEntry> yVals1 = new ArrayList<BarEntry>();
        ArrayList<BarEntry> yVals2 = new ArrayList<BarEntry>();
        ArrayList<BarEntry> yVals3 = new ArrayList<BarEntry>();

        for (int i = 0; i < data.size(); i++) {
            float val = TextUtils.isEmpty(data.get(i).getValue()) ? 0 : Float.valueOf(data.get(i).getValue());
            yVals1.add(new BarEntry(i, val));
        }
        for (int i = 0; i < data1.size(); i++) {
            float val = TextUtils.isEmpty(data1.get(i).getValue()) ? 0 : Float.valueOf(data1.get(i).getValue());
            yVals2.add(new BarEntry(i, val));
        }
        for (int i = 0; i < data2.size(); i++) {
            float val = TextUtils.isEmpty(data2.get(i).getValue()) ? 0 : Float.valueOf(data2.get(i).getValue());
            yVals3.add(new BarEntry(i, val));
        }

        BarDataSet set1, set2, set3;

        if (mBarChart.getData() != null &&
                mBarChart.getData().getDataSetCount() > 0) {
            set1 = (BarDataSet) mBarChart.getData().getDataSetByIndex(0);
            set1.setValues(yVals1);
            mBarChart.getData().notifyDataChanged();
            mBarChart.notifyDataSetChanged();
        } else {
            set1 = new BarDataSet(yVals1, "");
            set1.setColor(Color.rgb(104, 241, 175));
            set2 = new BarDataSet(yVals2, "");
            set2.setColor(Color.rgb(164, 228, 251));
            set3 = new BarDataSet(yVals3, "");
            set3.setColor(Color.rgb(242, 247, 158));

            ArrayList<IBarDataSet> dataSets = new ArrayList<IBarDataSet>();
            dataSets.add(set1);
            dataSets.add(set2);
            dataSets.add(set3);

            BarData data = new BarData(dataSets);
            data.setValueTextSize(10f);
            data.setBarWidth(0.9f);

            mBarChart.setData(data);
        }
    }
}
